%YAML 1.2
---
# https://www.sublimetext.com/docs/3/syntax.html
# https://wiki.tcl-lang.org/page/Dodekalogue
# https://www.tcl.tk/man/tcl8.6/TclCmd/Tcl.htm
name: Tcl2
file_extensions:
  - tcl2
scope: source.tcl

variables:
  end_char:   '[\s;\)\]\}]|\\$'
  b:          '(?=[\s;\)\]\}]|\\$)'
  ident:       '[_A-Za-z][_0-9A-Za-z]*'
  illegal:    '[^\s;\)\]\}\\]+'

  # https://www.tutorialspoint.com/tcl-tk/tcl_special_variables.htm
  variables: |-
    (?x:
      # https://www.tcl.tk/man/tcl8.6/TclCmd/tclvars.htm
      argc|argv|argv0|env|errorCode|errorInfo|tcl_interactive|tcl_library|
      tcl_pkgPath|tcl_patchLevel|tcl_platform|tcl_precision|tcl_prompt1|
      tcl_prompt2|tcl_rcFileName|tcl_traceCompile|tcl_traceExec|tcl_version|
      # https://www.tcl.tk/man/tcl8.6/TclCmd/library.htm#M20
      auto_execs|auto_index|auto_noexec|auto_noload|auto_path|env\(TCL_LIBRARY\)|env\(TCLLIBPATH\)
    ){{b}}

  keywords: |-
    (?x:eval|list|load|next|nextto|uplevel|yield|yieldto|unload|unset|
    ){{b}}

  builtin_funcs: |-
    (?x:
      append|apply|bgerror|binary|cd|clock|close|concat|dde|encoding|eof|exec|
      fblocked|fconfigure|fcopy|fileevent|filename|flush|format|gets|glob|history|
      http|info|interp|join|library|memory|msgcat|open|package|pid|pkg::create|
      pkg_mkIndex|puts|pwd|read|registry|rename|resource|scan|seek|socket|source|
      split|subst|tailcall|tcltest|tclvars|tell|time|trace|unknown|update|vwait|zlib|
      # list manipulation commands
      lappend|lassign|lindex|linsert|llength|lmap|lrange|lrepeat|
      lreplace|lreverse|lsearch|lset|lsort|
      # https://www.tcl.tk/man/tcl8.6/TclCmd/library.htm#M5
      auto_execok|auto_import|auto_load|auto_mkindex|auto_qualify|auto_reset|
      parray|tcl_endOfWord|tcl_findLibrary|tcl_startOfNextWord|
      tcl_startOfPreviousWord|tcl_wordBreakAfter|tcl_wordBreakBefore
    ){{b}}

  math_funcs: |-
    (?x:
      abs|acos|asin|atan|atan2|bool|ceil|cos|cosh|double|entier|exp|floor|fmod|
      hypot|int|isqrt|log|log10|max|min|pow|rand|round|sin|sinh|sqrt|srand|tan|
      tanh|wide
    ){{b}}

contexts:
  main:
    - include: comments
    - match: ;
      scope: punctuation.terminator.command.tcl
    # used for completions
    - match: \s+
      scope: meta.expect-command.tcl

    # known commands
    - match: '{{keywords}}'
      scope: keyword.other.builtin.tcl
      push: cmd-generic-end
    - match: '{{builtin_funcs}}'
      scope: support.function.builtin.tcl
      push: cmd-generic-end
    - match: '{{math_funcs}}'
      scope: support.function.math.tcl
      push: cmd-generic-end

    # special commands
    - include: cmd-array
    - include: cmd-after
    - include: cmd-coroutine
    - include: cmd-expr
    - include: cmd-file
    - include: cmd-incr
    - include: cmd-regexp
    - include: cmd-string
    - include: cmd-set

    # flow control structures
    - include: flow-control
    - include: switch
    - include: try-trap
    - include: proc
    - include: namespace

    # generic commands
    - include: cmd-generic

##[ AFTER COMMANDS ]##########################################################

  cmd-after:
    # https://www.tcl.tk/man/tcl8.6/TclCmd/after.htm
    - match: after{{b}}
      scope: keyword.other.builtin.tcl
      push: [cmd-after-meta, cmd-after-script, cmd-after-args]

  cmd-after-args:
    - match: idle{{b}}
      scope: variable.parameter.tcl
      pop: true
    - match: (cancel|info){{b}}
      scope: variable.function.tcl
      pop: true
    - include: word-any-pop

  cmd-after-script:
    - match: ''
      set:
        - meta_scope: meta.script.tcl
        - include: eoc-pop
        - include: main

  cmd-after-meta:
    - meta_scope: meta.after.tcl
    - include: any-pop

##[ ARRAY COMMANDS ]##########################################################

  cmd-array:
    # https://www.tcl.tk/man/tcl8.6/TclCmd/array.htm
    - match: array{{b}}
      scope: keyword.other.builtin.tcl
      push: [cmd-array-meta, cmd-array-args]

  cmd-array-args:
    # array anymore arrayName searchId
    # array donesearch arrayName searchId
    # array nextelement arrayName searchId
    - match: (anymore|donesearch|nextelement){{b}}
      scope: variable.function.tcl
      set: [word-any-pop, cmd-generic-arg]
    # array exists arrayName
    # array size arrayName
    # array startsearch arrayName
    # array statistics arrayName
    - match: (exists|size|startsearch|statistics){{b}}
      scope: variable.function.tcl
      set: cmd-generic-arg
    # array get arrayName ?pattern?
    # array unset arrayName ?pattern?
    - match: (get|unset){{b}}
      scope: variable.function.tcl
      set: [word-glob-pop, cmd-generic-arg]
    # array set arrayName list
    - match: set{{b}}
      scope: variable.function.tcl
      set: [cmd-generic-end, cmd-generic-arg]
    # array names arrayName ?mode? ?pattern?
    - match: names{{b}}
      scope: variable.function.tcl
      set: [cmd-array-names-switches, cmd-generic-arg]
    - include: else-pop

  cmd-array-names-switches:
    - include: eoc-pop
    - match: -exact{{b}}
      scope: variable.parameter.tcl
      set: word-string-pop
    - match: -glob{{b}}
      scope: variable.parameter.tcl
      set: word-glob-pop
    - match: -regexp{{b}}
      scope: variable.parameter.tcl
      set: word-regexp-pop
    - match: '-{{illegal}}'
      scope: invalid.illegal.parameter.tcl
      set: word-string-pop
    - match: (?=\S)
      set: word-string-pop

  cmd-array-meta:
    - meta_scope: meta.command.array.tcl
    - include: eoc-pop-or-illegal

##[ COROUTINE COMMAND ]#######################################################

  cmd-coroutine:
    # https://www.tcl.tk/man/tcl8.6/TclCmd/coroutine.htm
    - match: coroutine{{b}}
      scope: meta.coroutine.tcl keyword.other.builtin.tcl
      push:
        - cmd-coroutine-meta
        - cmd-after-script
        - cmd-coroutine-name-meta
        - cmd-coroutine-name

  cmd-coroutine-name:
    # simple coroutine name
    - match: '{{ident}}'
      scope: entity.name.function.tcl
      pop: true
    # scripted coroutine name
    - include: word-any-pop

  cmd-coroutine-name-meta:
    - clear_scopes: 1
    - meta_content_scope: meta.coroutine.name.tcl
    - include: any-pop

  cmd-coroutine-meta:
    - meta_content_scope: meta.coroutine.body.tcl
    - include: eoc-pop-or-illegal

##[ EXPR COMMAND ]############################################################

  cmd-expr:
    # https://www.tcl.tk/man/tcl8.6/TclCmd/expr.htm
    - match: expr{{b}}
      scope: keyword.other.builtin.tcl
      push: cmd-expr-body

  cmd-expr-body:
    - meta_scope: meta.expression.tcl
    - include: operator-expand-args
    # braced expression which continues at the next line even without
    # line continuation. It does not contain commands.
    - match: \{
      scope: punctuation.section.braces.begin.tcl
      push:
        - meta_scope: meta.braces.tcl
        - include: braces-end-pop
        - include: expressions
    - include: expressions
    - include: eoc-pop

##[ FILE COMMANDS ]###########################################################

  cmd-file:
    # https://www.tcl.tk/man/tcl8.6/TclCmd/file.htm
    - match: file{{b}}
      scope: keyword.other.builtin.tcl
      push: [cmd-generic-end, cmd-file-args]

  cmd-file-args:
    - match: |-
        (?x:
          atime|attributes|attributes|attributes|channels|copy|copy|delete|
          dirname|executable|exists|extension|isdirectory|isfile|join|link|
          lstat|mkdir|mtime|nativename|normalize|owned|pathtype|readable|
          readlink|rename|rename|rootname|separator|size|split|stat|system|
          tail|tempfile|type|volumes|writable
        ){{b}}
      scope: variable.function.tcl
      pop: true
    - include: else-pop

##[ INCR COMMANDS ]###########################################################

  cmd-incr:
    # https://www.tcl.tk/man/tcl8.6/TclCmd/incr.htm
    - match: incr{{b}}
      scope: keyword.other.builtin.tcl
      push:
        - cmd-incr-end
        - cmd-generic-arg
        - cmd-generic-var

  cmd-incr-end:
    - meta_scope: meta.function-call.tcl
    - include: eoc-pop-or-illegal

##[ REGEXP COMMANDS ]#########################################################

  cmd-regexp:
    # https://www.tcl.tk/man/tcl8.6/TclCmd/regexp.htm
    - match: regexp{{b}}
      scope: support.function.builtin.tcl
      push:
        - cmd-regexp-matches     # string, match, submatches
        - word-regexp-pop        # pattern
        - cmd-regexp-switches    # switches
    - match: regsub{{b}}
      scope: support.function.builtin.tcl
      push:
        - eoc-pop-or-illegal     # must be end of command
        - cmd-generic-var        # varname
        - word-regexp-pop        # substitution
        - cmd-generic-arg        # string
        - word-regexp-pop        # pattern
        - cmd-regexp-switches    # switches

  cmd-regexp-switches:
    # quoted string indicates start of pattern
    - match: (?=[""{])
      pop: true
    # Marks the end of switches. The argument following this one will be treated
    # as exp even if it starts with a -.
    - match: \-\-
      scope: punctuation.terminator.switches.tcl
      pop: true
    # Normal switches
    - match: -(about|expanded|indices|line|linestop|lineanchor|nocase|all|inline){{b}}
      scope: variable.parameter.tcl
    - match: -(start){{b}}
      scope: variable.parameter.tcl
      push: word-any-pop
    - include: else-pop

  cmd-regexp-matches:
    - include: words
    - match: '{{illegal}}'
      scope: variable.other.tcl
    - include: eoc-pop

##[ STRING COMMANDS ]#########################################################

  cmd-string:
    # https://www.tcl.tk/man/tcl8.6/TclCmd/string.htm
    - match: string{{b}}
      scope: keyword.other.builtin.tcl
      push: [cmd-generic-end, cmd-string-args]

  cmd-string-args:
    - match: is{{b}}
      scope: variable.function.string.tcl
      set: [cmd-string-is-args, eow-pop]
    - match: match{{b}}
      scope: variable.function.string.tcl
      set:
        - word-glob-pop
        - cmd-string-match-switches
        - eow-pop
    - match: |-
        (?x:
          cat|compare|equal|first|index|last|length|map|range|repeat|
          replace|reverse|tolower|totitle|toupper|trim|trimleft|trimright|
          bytelength|wordend|wordstart
        ){{b}}
      scope: variable.function.string.tcl
      pop: true
    - include: else-pop

  cmd-string-is-args:
    - match: |-
        (?x:
          alnum|alpha|ascii|boolean|control|digit|double|entier|false|graph|
          integer|list|lower|print|punct|space|true|upper|wideinteger|wordchar|
          xdigit
        ){{b}}
      scope: storage.type.tcl
      pop: true
    - include: else-pop

  cmd-string-match-switches:
    - match: (?=[\"\{])
      pop: true
    - match: -nocase{{b}}
      scope: variable.parameter.tcl
      pop: true
    - match: -{{illegal}}
      scope: invalid.illegal.parameter.tcl
      pop: true
    - include: eow-pop-or-illegal

##[ SET COMMAND ]#############################################################

  cmd-set:
    - match: set{{b}}
      scope: keyword.other.builtin.tcl
      push: [cmd-generic-end, cmd-generic-var]

##[ FLOW CONTROL ]############################################################

  flow-control:
    # flow
    - match: break{{b}}
      scope: keyword.control.flow.break.tcl
      push: eoc-pop-or-illegal
    - match: continue{{b}}
      scope: keyword.control.flow.continue.tcl
      push: eoc-pop-or-illegal
    - match: error{{b}}
      scope: keyword.control.flow.error.tcl
      push:
        - include: errorcodes
        - include: cmd-generic-end
    - match: exit{{b}}
      scope: keyword.control.flow.exit.tcl
      push: eoc-pop-or-illegal
    - match: return{{b}}
      scope: keyword.control.flow.return.tcl
      push:
        - include: errorcodes
        - include: cmd-generic-end
    - match: throw{{b}}
      scope: keyword.control.flow.throw.tcl
      push: cmd-generic-end
    - match: catch{{b}}
      scope: keyword.control.flow.catch.tcl
      push: [cmd-generic-var, word-script-pop]

    # conditional
    - match: if{{b}}
      scope: keyword.control.flow.if.tcl
      push: [elseif-pop, word-script-pop, condition-pop]
    - match: elseif{{b}}
      scope: invalid.illegal.unexpected.tcl
      push: [word-script-pop, condition-pop]
    - match: else{{b}}
      scope: invalid.illegal.unexpected.tcl
      push: word-script-pop

    # loops
    - match: for{{b}}
      scope: keyword.control.flow.for.tcl
      push: [word-script-pop, word-script-pop, condition-pop, word-script-pop]
    - match: foreach{{b}}
      scope: keyword.control.flow.foreach.tcl
      push: [word-script-pop, condition-pop, cmd-generic-var]
    - match: while{{b}}
      scope: keyword.control.flow.while.tcl
      push: [word-script-pop, condition-pop]

  condition-pop:
    - match: (false|true){{b}}
      scope: constant.language.tcl
      set: eow-pop
    - include: word-expr-pop

  elseif-pop:
    - meta_scope: meta.statement.conditional.tcl
    - match: elseif{{b}}
      scope: keyword.control.flow.elseif.tcl
      push: [word-script-pop, condition-pop, eow-pop]
    - match: else{{b}}
      scope: keyword.control.flow.else.tcl
      push: [word-script-pop, eow-pop]
    - include: eoc-pop

##[ SWITCH ]##################################################################

  switch:
    # https://www.tcl.tk/man/tcl8.6/TclCmd/switch.htm
    - match: switch{{b}}
      scope: keyword.control.flow.switch.tcl
      push: [switch-meta, switch-options]

  switch-options:
    - include: eoc-pop
    # exact match patterns
    - match: -exact{{b}}
      scope: variable.parameter.tcl
      set: [switch-exact-patterns, word-string-pop, switch-options-remaining]
    # string match patterns
    - match: -glob{{b}}
      scope: variable.parameter.tcl
      set: [switch-glob-patterns, word-string-pop, switch-options-remaining]
    # regexp match patterns
    - match: -regexp{{b}}
      scope: variable.parameter.tcl
      set: [switch-regexp-patterns, word-string-pop, switch-options-remaining]
    # end of options
    - match: \-\-{{b}}
      scope: punctuation.terminator.switches.tcl
      set: [switch-exact-patterns, word-string-pop]
    - include: switch-options-common
    - match: (?=\S)
      set: [switch-exact-patterns, word-string-pop]

  switch-options-remaining:
    # end of options
    - match: \-\-{{b}}
      scope: punctuation.terminator.switches.tcl
      pop: true
    - include: switch-options-common
    - include: else-pop

  switch-options-common:
    - match: -(indexvar|matchvar){{b}}
      scope: variable.parameter.tcl
      push: word-any-pop
    - match: -nocase{{b}}
      scope: variable.parameter.tcl
    - match: -{{illegal}}
      scope: invalid.illegal.parameter.tcl

  switch-exact-patterns:
    - include: eoc-pop
    # braced list of <pattern> <body> pairs
    - match: \{
      scope: punctuation.section.list.begin.tcl
      set:
        - meta_scope: meta.list.tcl
        - match: \}
          scope: punctuation.section.list.end.tcl
          pop: true
        - include: comments
        - include: switch-exact-pattern
    # word list of <pattern> <body> pairs
    - match: (?=\S)
      set:
        - include: eoc-pop
        - include: switch-exact-pattern

  switch-exact-pattern:
    - include: switch-default-pattern
    - match: (?=\S)
      push: [switch-body, word-string-pop]

  switch-glob-patterns:
    - include: eoc-pop
    # braced list of <pattern> <body> pairs
    - match: \{
      scope: punctuation.section.list.begin.tcl
      set:
        - meta_scope: meta.list.tcl
        - match: \}
          scope: punctuation.section.list.end.tcl
          pop: true
        - include: comments
        - include: switch-glob-pattern
    # word list of <pattern> <body> pairs
    - match: (?=\S)
      set:
        - include: eoc-pop
        - include: switch-glob-pattern

  switch-glob-pattern:
    - include: switch-default-pattern
    - match: (?=\S)
      push: [switch-body, word-glob-pop]

  switch-regexp-patterns:
    - include: eoc-pop
    # braced list of <pattern> <body> pairs
    - match: \{
      scope: punctuation.section.list.begin.tcl
      set:
        - meta_scope: meta.list.tcl
        - match: \}
          scope: punctuation.section.list.end.tcl
          pop: true
        - include: comments
        - include: switch-regexp-pattern
    # word list of <pattern> <body> pairs
    - match: (?=\S)
      set:
        - include: eoc-pop
        - include: switch-regexp-pattern

  switch-regexp-pattern:
    - include: switch-default-pattern
    - match: (?=\S)
      push: [switch-body, word-regexp-pop]

  switch-default-pattern:
    # A special string value, which is used to capture all unmatched results.
    - match: default{{b}}
      scope: keyword.control.flow.default.tcl
      push: switch-body

  switch-body:
    # If a body is specified as “-” it means that the body for the next pattern
    # should also be used as the body for this pattern.
    - match: \-
      scope: punctuation.separator.sequence.tcl
      pop: true
    - include: word-script-pop

  switch-meta:
    - meta_scope: meta.statement.switch.tcl
    - include: eoc-pop-or-illegal

##[ TRY..TRAP..FINALLY ]######################################################

  try-trap:
    # https://www.tcl.tk/man/tcl8.6/TclCmd/try.htm
    - match: try{{b}}
      scope: keyword.control.flow.try.tcl
      push: [try-trap-pop, word-script-pop]
    - match: on{{b}}
      scope: invalid.illegal.unexpected.tcl
      push: [word-script-pop, cmd-generic-var, try-on-code, eow-pop]
    - match: trap{{b}}
      scope: invalid.illegal.unexpected.tcl
      push: [word-script-pop, cmd-generic-var, cmd-generic-var]
    - match: finally{{b}}
      scope: invalid.illegal.unexpected.tcl
      push: word-script-pop

  try-trap-pop:
    # on <code> <variableList> <script>
    - match: on{{b}}
      scope: keyword.control.flow.on.tcl
      push: [word-script-pop, cmd-generic-var, try-on-code, eow-pop]
    # trap <pattern> <variableList> <script>
    - match: trap{{b}}
      scope: keyword.control.flow.trap.tcl
      push: [word-script-pop, cmd-generic-var, cmd-generic-var]
    # finally <script>
    - match: finally{{b}}
      scope: keyword.control.flow.finally.tcl
      push: word-script-pop
    - include: eoc-pop

  try-on-code:
    - match: \d+{{b}}
      scope: constant.numeric.integer.tcl
      set: eow-pop
    - match: (ok|error|return|break|continue){{b}}
      scope: constant.language.errorcode.tcl
      set: eow-pop
    - include: words
    - include: eow-pop
    - match: '{{illegal}}'
      scope: invalid.illegal.errorcode.tcl
      pop: true

##[ NAMESPACE ]###############################################################

  namespace:
    # https://www.tcl.tk/man/tcl8.6/TclCmd/namespace.htm
    - match: namespace{{b}}
      scope: keyword.other.builtin.tcl
      push: [namespace-meta, namespace-type, eow-pop]

  namespace-type:
    - match: eval{{b}}
      scope: variable.function.tcl
      set: [word-script-pop, namespace-name, eow-pop]
    - match: upvar{{b}}
      scope: storage.type.tcl
      pop: true
    - match: |-
        (?x:
          children|code|current|delete|ensemble|exists|export|forget|import|
          inscope|origin|parent|path|qualifiers|tail|unknown|which
        ){{b}}
      scope: variable.function.tcl
      pop: true
    - include: any-pop

  namespace-name:
    - match: '{{ident}}{{b}}'
      scope: entity.name.namespace.tcl
      set: eow-pop
    - include: word-string-pop

  namespace-meta:
    - meta_scope: meta.namespace.tcl
    - include: cmd-generic-end

  namespace-accessor:
    - match: :{2,}
      scope: punctuation.accessor.colon.tcl

##[ PROC ]####################################################################

  proc:
    # https://www.tcl.tk/man/tcl8.6/TclCmd/proc.htm
    - match: proc{{b}}
      scope: keyword.declaration.proc.tcl
      push: [proc-meta, word-script-pop, proc-params, proc-name, eow-pop]
    - match: (global|upvar|variable){{b}}
      scope: storage.type.tcl
      push: [proc-vars-end, cmd-generic-var]

  proc-name:
    # simple program name
    - match: '{{ident}}'
      set:
        - meta_scope: entity.name.function.tcl
        - include: namespace-accessor
        - match: (?![_0-9A-Za-z])
          set: eow-pop-or-illegal
    # scripted program name
    - include: word-string-pop

  proc-params:
    - include: operator-expand-args
    # braced list of arguments
    - match: \{
      scope: punctuation.section.braces.begin.tcl
      set:
        - meta_scope: meta.function.parameters.tcl meta.braces.tcl
        # braced parameter with at most 2 items: {name default}
        - match: \{
          scope: punctuation.section.braces.begin.tcl
          push:
            - proc-params-braced-meta
            - proc-params-braced-default
            - proc-params-braced-name
        # parameter names without default value
        - include: proc-params-simple
        - include: braces-end-pop
        - include: continuation
    # single argument word
    - match: $|(?=\S)
      set:
        - meta_scope: meta.function.parameters.tcl
        - include: proc-params-simple
        - include: eow-pop

  proc-params-braced-name:
    # simple parameter name
    - match: '{{ident}}{{b}}'
      scope: variable.parameter.tcl
      set: eow-pop
    # scripted parameter name
    - include: word-string-pop

  proc-params-braced-default:
    # parameter default value
    - include: words
    - include: eow-pop-or-illegal

  proc-params-braced-meta:
    - meta_scope: meta.braces.tcl
    - include: braces-end-pop

  proc-params-simple:
    # simple parameter name
    - match: '{{ident}}{{b}}'
      scope: variable.parameter.tcl
    # scripted parameter name
    - include: words

  proc-meta:
    - meta_scope: meta.function.tcl
    - include: eoc-pop-or-illegal

  proc-vars-end:
    - meta_scope: meta.definition.variable.tcl
    - include: expressions
    - include: eoc-pop

##[ RULE 1 - COMMANDS ]#######################################################

  cmd-generic:
    - match: (?=\S)
      push: [cmd-generic-end, cmd-generic-name]

  cmd-generic-name:
    - meta_scope: meta.command.tcl variable.function.tcl
    - match: \[
      scope: punctuation.section.substitution.begin.tcl
      push:
        - clear_scopes: 1
        - meta_scope: meta.substitution.tcl
        - match: \]
          scope: punctuation.section.substitution.end.tcl
          pop: true
        - include: main
    - include: words-pop

  cmd-generic-arg:
    - include: eoc-pop
    - match: (?=\S)
      set:
        - meta_content_scope: meta.argument.tcl variable.other.tcl
        - include: words-pop

  cmd-generic-var:
    - include: operator-expand-args
    # list like variable
    - match: \{
      scope: punctuation.section.braces.begin.tcl
      set:
        - meta_scope: meta.braces.tcl
        - include: braces-end-pop
        - match: '{{ident}}'
          push: [variable-simple-end, variable-simple-name]
        - include: words
    # simple variable
    - match: '{{ident}}'
      set: [variable-simple-end, variable-simple-name]
    - include: word-string-pop

  cmd-generic-end:
    - meta_scope: meta.function-call.tcl
    - include: cmd-generic-switches
    - include: words
    - include: eoc-pop

  cmd-generic-switches:
    - match: -{{ident}}{{b}}
      scope: variable.parameter.tcl

##[ RULE 2 - WORDS / ANYTHING ]###############################################

  word-any-pop:
    # A generally usable word whose type is not defined in detail.
    # It can be a string/variable/number.
    - include: eoc-pop
    - include: operator-expand-args
    - match: \{
      scope: punctuation.section.braces.begin.tcl
      set:
        - meta_scope: meta.braces.tcl string.quoted.brace.tcl
        - include: braces-string-body
        - include: braces-end-pop
    - match: \"
      scope: punctuation.definition.string.begin.tcl
      set:
        - meta_scope: string.quoted.double.tcl
        - include: string-body
        - include: string-quoted-double-end
    - match: (?=\S)
      set:
        - include: numbers
        - include: string-body
        - include: namespace-accessor
        - include: eow-pop

##[ RULE 2 - WORDS / SCRIPT ]#################################################

  word-script-pop:
    # A single word, which represents a script block no matter whether it
    # is braced or starts at the beginning of a line or not. The first word
    # is handled as command acording to rule 1.
    - include: eoc-pop
    - include: operator-expand-args
    # braced script
    - match: \{
      scope: punctuation.section.block.begin.tcl
      set:
        - meta_scope: meta.block.tcl meta.script.tcl
        - match: \}
          scope: punctuation.section.block.end.tcl
          set: eow-pop-or-illegal
        - include: main
    # single word script,
    # a substitution or variable of a dynamically created script
    - match: (?=\S)
      set:
        - meta_scope: meta.script.tcl
        - include: string-body
        - include: namespace-accessor
        - include: eow-pop

##[ RULE 2 - WORDS / EXPRESSION ]#############################################

  word-expr-pop:
    - include: eoc-pop
    - include: operator-expand-args
    # braced expression
    - match: \{
      scope: punctuation.section.braces.begin.tcl
      set:
        - meta_scope: meta.braces.tcl meta.expression.tcl
        - include: expressions
        - include: braces-end-pop
    # single word expression,
    # a substitution or variable of a dynamically created expression
    - match: (?=\S)
      set:
        - meta_scope: meta.expression.tcl
        - include: string-body
        - include: namespace-accessor
        - include: eow-pop

##[ RULE 2 - WORDS / LIST ]###################################################

  word-list-pop:
    - include: eoc-pop
    - include: operator-expand-args
    - match: \{
      scope: punctuation.section.braces.begin.tcl
      set:
        - meta_scope: meta.braces.tcl meta.list.tcl
        - include: words
        - include: braces-end-pop
    - match: (?=\S)
      set:
        - include: numbers
        - include: string-body
        - include: namespace-accessor
        - include: eow-pop

##[ RULE 2 - WORDS / PATTERN ]################################################

  word-glob-pop:
    # https://www.tcl.tk/man/tcl8.6/TclCmd/string.htm#M35
    - include: eoc-pop
    - include: operator-expand-args
    - match: \{
      scope: punctuation.section.braces.begin.tcl
      set:
        - meta_scope: meta.braces.tcl string.quoted.brace.tcl
        - include: word-glob-body
        - include: braces-end-pop
    - match: \"
      scope: punctuation.definition.string.begin.tcl
      set:
        - meta_scope: string.quoted.double.tcl
        - include: word-glob-body
        - include: string-quoted-double-end
    - match: (?=\S)
      set:
        - meta_scope: string.unquoted.tcl
        - include: word-glob-body
        - include: eow-pop

  word-glob-body:
    - include: escape
    - include: variable
    # Don't match the first `-` after `[` as punctuation.separator.
    - match: (\[)-?
      captures:
        1: punctuation.section.bracket.begin.tcl
      push:
        - meta_scope: meta.bracket.tcl constant.other.placeholder.tcl
        - match: \]
          scope: punctuation.section.bracket.begin.tcl
          pop: true
        - match: \-
          scope: punctuation.separator.sequence.tcl
        - match: \\.
          scope: constant.character.escape.tcl
    - match: '[*?]'
      scope: constant.other.placeholder.tcl

##[ RULE 2 - WORDS / REGEXP ]#################################################

  word-regexp-pop:
    - include: eoc-pop
    - include: operator-expand-args
    - match: \{
      scope: punctuation.section.braces.begin.tcl
      set:
        - meta_scope: meta.braces.tcl string.quoted.brace.tcl string.regexp.tcl
        - include: word-regexp-body
        - include: braces-end-pop
    - match: \"
      scope: punctuation.definition.string.begin.tcl
      set:
        - meta_scope: string.quoted.double.tcl string.regexp.tcl
        - include: word-regexp-body
        - include: string-quoted-double-end
    - match: (?=\S)
      set:
        - meta_scope: string.unquoted.tcl string.regexp.tcl
        - include: word-regexp-body
        - include: eow-pop
      with_prototype:
        # make sure to pop off with whitespace and command termination
        # even when within a character group/bracket/brace to comply
        # with TCL's [2] Words rule.
        - include: eol-pop
        - match: (?=\s;)
          pop: true

  word-regexp-body:
    # TODO: make TCL regexp rules
    - match: \(
      scope: punctuation.section.group.begin.tcl
      push:
        - meta_scope: meta.group.tcl
        - match: \)
          scope: punctuation.section.group.end.tcl
          pop: true
    - match: \[
      scope: punctuation.section.bracket.begin.tcl
      push:
        - meta_scope: meta.bracket.tcl
        - match: \]
          scope: punctuation.section.bracket.end.tcl
          pop: true
    - match: escape
    - match: \{
      scope: punctuation.section.braces.begin.tcl
      push:
        - meta_scope: meta.braces.tcl
        - match: \}
          scope: punctuation.section.braces.end.tcl
          pop: true
        - match: escape

##[ RULE 2 - WORDS / STRING ]#################################################

  word-string-pop:
    - include: eoc-pop
    - include: operator-expand-args
    - match: \{
      scope: punctuation.section.braces.begin.tcl
      set:
        - meta_scope: meta.braces.tcl string.quoted.brace.tcl
        - include: braces-string-body
        - include: braces-end-pop
    - match: \"
      scope: punctuation.definition.string.begin.tcl
      set:
        - meta_scope: string.quoted.double.tcl
        - include: string-body
        - include: string-quoted-double-end
    - match: (?=\S)
      set:
        - meta_scope: string.unquoted.tcl
        - include: string-body
        - include: eow-pop

##[ RULE 2 - WORDS ]##########################################################

  expressions:
    - include: words
    - include: operators

  expressions-pop:
    - include: expressions
    - include: eow-pop

  words:
    - include: numbers
    - include: string-quoted-double
    - include: string-body
    - include: braces
    - include: namespace-accessor

  words-pop:
    - include: words
    - include: eow-pop

  string-body:
    - include: escape
    - include: substitution
    - include: variable

##[ RULE 4 - DOUBLE QUOTED ]##################################################

  string-quoted-double:
    - match: \"
      scope: punctuation.definition.string.begin.tcl
      push:
        - meta_scope: string.quoted.double.tcl
        - include: string-body
        - include: string-quoted-double-end

  string-quoted-double-end:
    # Note: The end of a quoted string is always the end of the word.
    - match: \"
      scope: punctuation.definition.string.end.tcl
      set: eow-pop-or-illegal

##[ RULE 5 - ARGUMENT EXPANSION ]#############################################

  operator-expand-args:
    - match: \{\*\}(?=\S)
      scope: keyword.operator.word.tcl
      push: word-list-pop

##[ RULE 6 - BRACES ]#########################################################

  braces:
    - include: operator-expand-args
    - include: braces-string
    - include: braces-expr

  braces-expr:
    - match: \{
      scope: punctuation.section.braces.begin.tcl
      push:
        - meta_scope: meta.braces.tcl
        - include: braces-end-pop
        - include: braces-expr-body

  braces-expr-body:
    - include: operator-expand-args
    - match: \{
      scope: punctuation.section.braces.begin.tcl
      push:
        - meta_scope: meta.braces.tcl
        - match: \}
          scope: punctuation.section.braces.end.tcl
          pop: true
        - include: braces-expr-body
    - include: continuation
    - include: expressions
    # Note: Each new line within a brace quoted word starts with a command,
    #       if the previous line was not terminated with a line continuation
    - match: \n
      push:
        - match: (?=\})
          pop: true
        - include: main

  braces-string:
    # A single-line braced block without any other braces is handled as string.
    - match: \{(?=[^\{]*\})
      scope: punctuation.section.braces.begin.tcl
      push:
        - meta_scope: meta.braces.tcl string.quoted.brace.tcl
        - include: braces-end-pop
        - include: braces-string-body

  braces-string-body:
    # Note: ...for each additional open brace there must be
    #       an additional close brace
    - match: \{
      push:
        - match: \}
          pop: true
        - include: braces-string-body
    - match: \\\\
    - match: \\[n{[()]}]
      scope: constant.character.escape.other.tcl

  braces-end-pop:
    - match: \}
      scope: punctuation.section.braces.end.tcl
      set: eow-pop-or-illegal

##[ RULE 7 - COMMAND SUBSTITUTION ]###########################################

  substitution:
    - match: \[
      scope: punctuation.section.substitution.begin.tcl
      push:
        - meta_scope: meta.substitution.tcl
        - match: \]
          scope: punctuation.section.substitution.end.tcl
          pop: true
        - include: main

##[ RULE 8 - VARIABLES ]######################################################

  variable:
    - match: \${
      scope: punctuation.definition.variable.begin.tcl
      push: [variable-braced-end, variable-braced-name]
    - match: \$(?=[_0-9A-Za-z])
      scope: punctuation.definition.variable.tcl
      push: [variable-simple-end, variable-simple-name]

  variable-simple-name:
    - include: namespace-accessor
    - include: variable-index
    - match: (?![_0-9A-Za-z])
      pop: true

  variable-simple-end:
    - meta_scope: variable.other.tcl
    - include: any-pop

  variable-braced-name:
    - include: namespace-accessor
    - include: variable-index
    - match: (?=[\]\}])
      pop: true

  variable-braced-end:
    - meta_scope: variable.other.tcl
    - match: \}
      scope: punctuation.definition.variable.end.tcl
      pop: true

  variable-index:
    - match: \(
      scope: punctuation.section.parens.begin.tcl
      set:
        - meta_scope: meta.parens.tcl
        - match: \)
          scope: punctuation.section.parens.end.tcl
          pop: true
        - match: (?=[\]\}])
          pop: true
        - match: ','
          scope: punctuation.separator.sequence.tcl
        - include: escape
        - include: substitution
        - include: variable

##[ RULE 9 - BACKSLASH SUBSTITUTION ]#########################################

  continuation:
    - match: \\$
      scope: punctuation.separator.continuation.newline.tcl
      push: continuation-body

  continuation-pop:
    - match: \\$
      scope: punctuation.separator.continuation.newline.tcl
      set: continuation-body

  continuation-body:
    # Note: Comments aren't vaild at the line after a continuation
    # but it helps avoid breaking syntax by syntax-test rules.
    - include: comments
    - match: (?=\S)
      pop: true

  escape:
    - match: \\\d{1,3}
      scope: constant.character.escape.octal.tcl
    - match: \\(x\h+|u\h{1,4}|U\h{1,8})
      scope: constant.character.escape.hexadecimal.tcl
    - match: \\.
      scope: constant.character.escape.other.tcl

##[ RULE 10 - COMMENTS ]######################################################

  comments:
    - match: '#'
      scope: punctuation.definition.comment.begin.tcl
      push:
        - meta_scope: comment.line.double-dash.tcl
        - match: $\n?
          pop: true

##[ CUSTOM ATOMICS ]##########################################################

  numbers:
    - match: \b0x\h*\b
      scope: constant.numeric.integer.tcl
    - match: \b0b[01]*\b
      scope: constant.numeric.integer.tcl
    - match: \b0o[0-7]*\b
      scope: constant.numeric.integer.tcl
    - match: \b[0-9]+\.[0-9]+\b
      scope: constant.numeric.float.tcl
    - match: \b[0-9]+\b
      scope: constant.numeric.integer.tcl

  errorcodes:
    - match: (ok|error|return|break|continue){{b}}
      scope: constant.language.errorcode.tcl

  operators:
    - match: \b(eq|ne|in|ni){{b}}
      scope: keyword.operator.relational.tcl
    - match: ==|!=|<=|>=|>|<
      scope: keyword.operator.relational.tcl
    - match: \*\*|[-+*/%]
      scope: keyword.operator.arithmetic.tcl
    - match: '&&|\|\||!'
      scope: keyword.operator.logical.tcl
    - match: '[\^\|&~]'
      scope: keyword.operator.bitwise.tcl
    - match: '[?:]'
      scope: keyword.operator.ternary.tcl

##[ CONTEXT POP OFFS ]########################################################

  any-pop:
    - match: ''
      pop: true

  else-pop:
    # Pop off with the next none-whitespace or at the end of line.
    - include: eol-pop
    - match: (?=\S)
      pop: true

  eol-pop:
    # Pop off at the end of a line, if it doesn't end with a line continuation.
    - include: continuation
    - match: $\n?
      pop: true

  eol-pop-or-illegal:
    - include: eol-pop
    - match: '{{illegal}}'
      scope: invalid.illegal.end-of-line-expected.tcl

  eow-pop:
    # [3] Words
    # Pop off at the end of a word. Words end with the next...
    # line continuation
    - include: continuation-pop
    # end of line
    - match: $
      pop: true
    # whitespace
    - match: (?=\s)
      set: else-pop
    # command termination character
    - match: (?=[;\]\}])
      pop: true

  eow-pop-or-illegal:
    - include: eow-pop
    - match: '{{illegal}}'
      scope: invalid.illegal.end-of-word-expected.tcl

  eoc-pop:
    # [1] Commands
    # Pop off at the end of a command. Commands end with a newline, semicolon,
    # or if a closing bracket or brace follows.
    - include: eol-pop
    - match: (?=[;\]\}])
      pop: true

  eoc-pop-or-illegal:
    - include: eoc-pop
    - match: '{{illegal}}'
      scope: invalid.illegal.end-of-cmd-expected.tcl
