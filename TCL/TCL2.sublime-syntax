%YAML 1.2
---
# https://www.sublimetext.com/docs/3/syntax.html
# https://wiki.tcl-lang.org/page/Dodekalogue
# https://www.tcl.tk/man/tcl8.6/TclCmd/Tcl.htm
name: Tcl2
file_extensions:
  - tcl2
scope: source.tcl

variables:
  end_char:   '[\s;\)\]\}]|\\$'
  b:          '(?=[\s;\)\]\}]|\\$)'
  ident:       '[_A-Za-z][_0-9A-Za-z]*'
  builtins: |-
    (?x:
      after|append|array|auto_execok|auto_import|auto_load|auto_mkindex|
      auto_mkindex_old|auto_qualify|auto_reset|bgerror|binary|cd|clock|close|
      concat|dde|encoding|eof|error|eval|exec|expr|fblocked|fconfigure|fcopy|
      file|fileevent|filename|flush|format|gets|glob|global|history|http|incr|
      info|interp|join|lappend|library|lindex|linsert|list|llength|load|lrange|
      lreplace|lsearch|lset|lsort|memory|msgcat|namespace|open|package|parray|
      pid|pkg::create|pkg_mkIndex|puts|pwd|re_syntax|read|regexp|regsub|registry|rename|
      resource|scan|seek|set|socket|SafeBase|source|split|string|subst|Tcl|
      tcl_endOfWord|tcl_findLibrary|tcl_startOfNextWord|tcl_startOfPreviousWord|
      tcl_wordBreakAfter|tcl_wordBreakBefore|tcltest|tclvars|tell|time|trace|
      unknown|unset|update|uplevel|upvar|variable|vwait
    ){{b}}
  variables: |-
    (?x:
      argc|argv|argv0|env|errorCode|errorInfo|tcl_interactive|tcl_library|
      tcl_pkgPath|tcl_patchLevel|tcl_platform|tcl_precision|tcl_prompt1|
      tcl_prompt2|tcl_rcFileName|tcl_traceCompile|tcl_traceExec|tcl_version
    )

contexts:
  main:
    # [1] Commands
    - include: comments
    # special commands
    - include: flow-control
    - include: namespace
    - include: proc
    - match: '{{builtins}}'
      scope: keyword.other.builtin.tcl
      push: cmd-args
    # generic commands
    - match: (?=\S)
      push: [cmd-args, cmd-name]

##[ COMMANDS ]################################################################

  cmd-name:
    - meta_scope: meta.command.tcl variable.function.tcl
    - match: (?=\[)
      push:
        - clear_scopes: 1
        - include: substitution
        - include: any-pop
    - include: expressions
    - include: eow-pop

  cmd-args:
    - meta_scope: meta.function-call.tcl
    - match: -{{ident}}{{b}}
      scope: variable.parameter.tcl
    - include: expressions
    - include: eoc-pop

##[ FLOW CONTROL ]############################################################

  flow-control:
    # flow
    - match: break{{b}}
      scope: keyword.control.flow.break.tcl
      push: eoc-pop-or-illegal
    - match: continue{{b}}
      scope: keyword.control.flow.continue.tcl
      push: eoc-pop-or-illegal
    - match: exit{{b}}
      scope: keyword.control.flow.exit.tcl
      push: eoc-pop-or-illegal
    - match: return{{b}}
      scope: keyword.control.flow.return.tcl
      push: cmd-args

    # conditional
    - match: catch{{b}}
      scope: keyword.control.flow.catch.tcl
      push: braces-cmd-block-pop
    - match: if{{b}}
      scope: keyword.control.flow.if.tcl
      push:
        - flow-elseif-pop
        - braces-cmd-block-pop
        - flow-condition-pop
    - match: else(if)?{{b}}
      scope: invalid.illegal.unexpected.tcl
      push:
        - flow-elseif-pop
        - braces-cmd-block-pop
        - flow-condition-pop
    - match: switch{{b}}
      scope: keyword.control.flow.switch.tcl
      push:
        - braces-cmd-block-pop
        - flow-condition-pop

    # loops
    - match: for{{b}}
      scope: keyword.control.flow.for.tcl
      push:
        - braces-cmd-block-pop
        - braces-cmd-block-pop
        - flow-condition-pop
        - braces-cmd-block-pop
    - match: foreach{{b}}
      scope: keyword.control.flow.foreach.tcl
      push:
        - braces-cmd-block-pop
        - flow-condition-pop
        - flow-foreach-var-pop
    - match: while{{b}}
      scope: keyword.control.flow.while.tcl
      push:
        - braces-cmd-block-pop
        - flow-condition-pop

  flow-condition-pop:
    - match: \s*
      set:
        - match: (false|true){{b}}
          scope: constant.language.tcl
        - include: braces-condition-pop
        - include: escape
        - include: numbers
        - include: string-quoted-double
        - include: variable
        - include: substitution
        - include: eow-pop

  flow-elseif-pop:
    - match: elseif{{b}}
      scope: keyword.control.flow.elseif.tcl
      push:
        - braces-cmd-block-pop
        - flow-condition-pop
    - match: else{{b}}
      scope: keyword.control.flow.else.tcl
      push: braces-cmd-block-pop
    - include: eoc-pop

  flow-foreach-var-pop:
    - match: \s*
      set:
        - meta_content_scope: variable.other.tcl
        - include: expressions
        - include: eow-pop

##[ NAMESPACE ]###############################################################

  namespace:
    - match: namespace{{b}}
      scope: keyword.control.flow.namespace.tcl
      push: [namespace-meta, braces-cmd-block-pop, namespace-name, namespace-eval, eow-pop]

  namespace-eval:
    - match: '{{ident}}'
      scope: keyword.control.flow.eval.tcl
      pop: true
    - include: expressions
    - include: else-pop

  namespace-name:
    - match: '{{ident}}'
      scope: entity.name.namespace.tcl
      pop: true
    - include: expressions
    - include: else-pop

  namespace-meta:
    - meta_scope: meta.namespace.tcl
    - include: eoc-pop

##[ PROC ]####################################################################

  proc:
    - match: proc{{b}}
      scope: keyword.control.flow.tcl
      push: [proc-meta, braces-cmd-block-pop, proc-params, proc-name, eow-pop]

  proc-name:
    - match: '{{ident}}'
      scope: entity.name.function.tcl
      pop: true
    - include: expressions
    - include: eow-pop

  proc-params:
    - include: expressions
    - include: eow-pop

  proc-meta:
    - meta_scope: meta.function.tcl
    - include: expressions
    - include: eoc-pop

##[ BRACES ]##################################################################

  braces:
    # [6] Braces
    - include: operator-expand-args
    - match: \{(?=\s*$)
      scope: punctuation.section.braces.begin.tcl
      push: braces-cmd-block-body
    - match: \{
      scope: punctuation.section.braces.begin.tcl
      push: braces-string-body

  braces-string-body:
    - meta_scope: meta.braces.tcl string.quoted.other.tcl
    - include: braces-end-pop
    - match: \\\\
    - match: \\[n{[()]}]
      scope: constant.character.escape.other.tcl
    - include: braces
    - include: numbers

  braces-condition-pop:
    - include: operator-expand-args
    - match: \{
      scope: punctuation.section.braces.begin.tcl
      set: braces-condition-body

  braces-condition-body:
    - meta_scope: meta.braces.tcl
    - include: braces-end-pop
    - match: ==|<=|>=|>|<|\|\||&&
      scope: keyword.operator.logical.tcl
    - match: n?eq{{b}}
      scope: keyword.operator.logical.tcl
    - include: line-continuation
    - include: expressions

  braces-cmd-block-pop:
    - include: operator-expand-args
    - match: \{
      scope: punctuation.section.braces.begin.tcl
      set: braces-cmd-block-body
    - include: else-pop

  braces-cmd-block-body:
    - meta_scope: meta.braces.tcl
    - include: braces-end-pop
    - include: line-continuation
    - include: main

  braces-end-pop:
    - match: \}
      scope: punctuation.section.braces.end.tcl
      pop: true

##[ EXPRESSIONS ]#############################################################

  expressions:
    - include: escape
    - include: numbers
    - include: string-quoted-double
    - include: variable
    - include: substitution
    - include: braces
    - include: operator-accessor
    # - match: '[^{{end_char}}]+'
    #   scope: string.unquoted.tcl

  numbers:
    - match: \b0x\h*\b
      scope: constant.numeric.integer.tcl
    - match: \b0b[01]*\b
      scope: constant.numeric.integer.tcl
    - match: \b0o[0-7]*\b
      scope: constant.numeric.integer.tcl
    - match: \b[0-9]+\.[0-9]+\b
      scope: constant.numeric.float.tcl
    - match: \b[0-9]+\b
      scope: constant.numeric.integer.tcl

  string-quoted-double:
    # [4] Double Quotes
    - match: \"
      scope: punctuation.definition.string.begin.tcl
      push:
        - meta_scope: string.quoted.double.tcl
        - match: \"
          scope: punctuation.definition.string.end.tcl
          pop: true
        - include: escape
        - include: substitution
        - include: variable

  operator-accessor:
    - match: :{2,}
      scope: punctuation.accessor.colon.tcl

  operator-expand-args:
    # [5] Argument expansion
    - match: \{\*\}(?=\S)
      scope: keyword.operator.word.tcl

  substitution:
    # [7] Command substitution
    - match: \[
      scope: punctuation.section.substitution.begin.tcl
      push:
        - meta_scope: meta.substitution.tcl
        - match: \]
          scope: punctuation.section.substitution.end.tcl
          pop: true
        - include: main

  escape:
    # [9] Backslash substitution
    - match: \\\d{1,3}
      scope: constant.character.escape.octal.tcl
    - match: \\(x\h+|u\h{1,4}|U\h{1,8})
      scope: constant.character.escape.hexadecimal.tcl
    - match: \\.
      scope: constant.character.escape.other.tcl

  comments:
    # [10] Comments
    - match: '#'
      scope: punctuation.definition.comment.begin.tcl
      push:
        - meta_scope: comment.line.double-dash.tcl
        - match: $\n?
          pop: true

##[ VARIABLES ]###############################################################

  variable:
    # [8] Variable substitution
    - match: \${
      scope: punctuation.definition.variable.begin.tcl
      push: [variable-braced-end, variable-braced-name]
    - match: \$
      scope: punctuation.definition.variable.tcl
      push: [variable-simple-end, variable-simple-name]

  variable-simple-name:
    - include: operator-accessor
    - include: variable-index
    - match: (?![_0-9A-Za-z])
      pop: true

  variable-simple-end:
    - meta_scope: variable.other.tcl
    - include: any-pop

  variable-braced-name:
    - include: operator-accessor
    - include: variable-index
    - match: (?=[\]\}])
      pop: true

  variable-braced-end:
    - meta_scope: variable.other.tcl
    - match: \}
      scope: punctuation.definition.variable.end.tcl
      pop: true

  variable-index:
    - match: \(
      scope: punctuation.section.parens.begin.tcl
      set:
        - meta_scope: meta.parens.tcl
        - match: \)
          scope: punctuation.section.parens.end.tcl
          pop: true
        - match: (?=[\]\}])
          pop: true
        - match: ','
          scope: punctuation.separator.sequence.tcl
        - include: escape
        - include: substitution
        - include: variable

##[ PROTOTYPES ]##############################################################

  any-pop:
    - match: ''
      pop: true

  line-continuation:
    - match: \\$
      scope: punctuation.separator.continuation.newline.tcl

  eol-pop:
    - match: \\$
      scope: punctuation.separator.continuation.newline.tcl
      push:
        # Note: Comments aren't vaild at the line after a ontinuation
        # but it helps avoid breaking syntax by syntax-test rules.
        - include: comments
        - match: (?=\S)
          pop: true
    - match: $\n?
      pop: true

  else-pop:
    # Pop off with the next none-whitespace or at the end of line.
    - include: eol-pop
    - match: (?=\S)
      pop: true

  eow-pop:
    # [3] Words
    # Pop off at the end of a word. Words end with the next
    # whitespace, end of line or command termination character
    - include: eol-pop
    - match: \s+|(?=[;\]\}])
      pop: true

  eoc-pop:
    # [1] Commands
    # Pop off at the end of a command. Commands end with a newline, semicolon,
    # or if a closing bracket or brace follows.
    - include: eol-pop
    - match: (?=[\]\}])
      pop: true
    - match: ;
      scope: punctuation.terminator.command.tcl
      pop: true

  eoc-pop-or-illegal:
    - include: eoc-pop
    - match: '[^\s;\)\]\}\\]+'
      scope: invalid.illegal.command-end-expected.tcl
